[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gnosis-mystic"
dynamic = ["version"]
description = "Advanced Python Function Debugging with MCP Integration"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.8"
authors = [
    { name = "Gnosis Team", email = "team@gnosis.dev" },
]
keywords = [
    "debugging",
    "function-hijacking", 
    "mcp",
    "ai-assistant",
    "introspection",
    "monitoring",
    "repl",
    "claude",
    "cursor"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Debuggers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    # Core dependencies
    "click>=8.0.0",
    "rich>=13.0.0",
    "textual>=0.50.0",
    "pydantic>=2.0.0",
    "anyio>=4.0.0",
    
    # MCP Protocol
    "websockets>=12.0",
    "httpx>=0.25.0",
    "sse-starlette>=1.8.0",
    "uvicorn>=0.24.0",
    "fastapi>=0.104.0",
    
    # REPL and UI
    "prompt-toolkit>=3.0.0",
    "pygments>=2.16.0",
    "colorama>=0.4.6",
    
    # Storage and Caching
    "sqlite-utils>=3.35.0",
    "diskcache>=5.6.0",
    "msgpack>=1.0.0",
    
    # Monitoring and Analytics
    "psutil>=5.9.0",
    "watchdog>=3.0.0",
    "memory-profiler>=0.61.0",
    
    # Security
    "cryptography>=41.0.0",
    "keyring>=24.0.0",
    
    # Development and Testing
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]
web = [
    "fastapi>=0.104.0",
    "jinja2>=3.1.0",
    "aiofiles>=23.2.0",
]
all = [
    "gnosis-mystic[dev,docs,web]"
]

[project.urls]
Homepage = "https://github.com/gnosis/gnosis-mystic"
Documentation = "https://gnosis-mystic.readthedocs.io"
Repository = "https://github.com/gnosis/gnosis-mystic"
"Bug Tracker" = "https://github.com/gnosis/gnosis-mystic/issues"

[project.scripts]
mystic = "mystic.cli:cli"
gnosis-mystic = "mystic.cli:cli"

[project.entry-points."mystic.plugins"]
core = "mystic.core:CorePlugin"
mcp = "mystic.mcp:MCPPlugin"
repl = "mystic.repl:REPLPlugin"
monitoring = "mystic.monitoring:MonitoringPlugin"

[tool.hatch.version]
path = "src/mystic/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/mystic"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/config",
    "/scripts",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",
]
# Coverage options (requires pytest-cov):
# "--cov=mystic",
# "--cov-report=term-missing", 
# "--cov-report=html",
# "--cov-report=xml",

testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmarks",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/benchmarks/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]